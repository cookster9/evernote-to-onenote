import datetime
#Read evernote note
import PASS
from evernote.edam.type.ttypes import NoteSortOrder
from evernote.edam.notestore.ttypes import NoteFilter, NotesMetadataResultSpec
from evernote.api.client import EvernoteClient
from parse_token import parse_token
import requests
import re


def main():
    evernote_token = PASS.evernote_token
    client = EvernoteClient(token=evernote_token, sandbox=False)
    userStore = client.get_user_store()
    noteStore = client.get_note_store()
    notebooks = noteStore.listNotebooks()

    full_token_url = PASS.azure_full_url #the entire url that shows up after navigating to the url generated by access_token_url
    token_parsed = parse_token(full_token_url)
    requestHeaders = {'Authorization': 'Bearer ' + token_parsed, 'Content-Type': 'text/html'}
    # requestHeaders = {'Authorization': token_parsed}

    # #open text file in read mode
    # text_file = open(".\IGNORE_evernote_note.txt", "r")
    
    # #read whole file to a string
    # data = text_file.read()
    header_data0 = '''<!DOCTYPE html>
                <html>
                <head>
                    <title>
            '''
    header_data1 = '''</title>
            <meta name="created" content="
            '''

    # sortOrder = NoteSortOrder("UPDATED")
    done =[] #you might hit a limit for api calls. this helps you start at notebooks that aren't done yet
    for n in notebooks:
        if(n.name not in done): 
            print(n.name)
            filter = NoteFilter(order=2, ascending=False, notebookGuid=n.guid) #reverse chronological
            resultSpec = NotesMetadataResultSpec()
            resultSpec.includeTitle = True
            resultSpec.includeContentLength = True
            resultSpec.includeCreated = True
            resultSpec.includeContent = True
            resultSpec.includeUpdated = True
            resultSpec.includeNotebookGuid = True
            resultSpec.includeAttributes = True
            resultSpec.includeTagGuids = True
            resultSpec.includeLargestResourceMime = True
            resultSpec.includeLargestResourceSize = True        

            notes = noteStore.findNotesMetadata(evernote_token, filter, 0, 1000000000, resultSpec)
            #Evernote stores its date/time values in epoch time - the number of seconds since 1/1/1970.

            #make the section first (notebook in evernote)
            #POST /me/onenote/notebooks/{id}/sections
            section_name = re.sub('[?*\\/:<>|&#''%~",]+','', n.name)
            
            section_create_url = 'https://graph.microsoft.com/v1.0/me/onenote/notebooks/'+onenote_notebook_id+'/sections'
            section_header = {'Authorization': 'Bearer ' + token_parsed, 'Content-Type': 'application/json'}
            section_content = '''{
    'displayName': "'''+section_name+'''"
    }'''

            print(section_content)

            section_results = requests.post(section_create_url, section_content, headers=section_header)

            print(section_results.json())

            section_id = section_results.json()['id']
            print(section_id)


            for note in notes.notes:
                print(note.guid)
                #print(note.updated)
                title = re.sub('[’]+','', note.title)
                date = note.updated
                formatted_date = float(note.updated)/1000
                print(datetime.datetime.fromtimestamp(formatted_date))#has to be in seconds not milliseconds
                datetime_date = str(datetime.datetime.fromtimestamp(formatted_date))

                content = noteStore.getNoteContent(evernote_token, note.guid)
                url = 'https://graph.microsoft.com/v1.0/me/onenote/sections/'+section_id+'/pages'

                note_data = re.sub('[^\x00-\x7F]+','', content)
                note_data = re.sub(r'[^\u0000-\u007F]+','', note_data)
                note_data = re.sub('[’]+','', note_data)
                note_data ='''" />
            </head>'''+note_data+'''
            </html>
            '''

                data = header_data0 + title + header_data1 + datetime_date + note_data

                # print(data)
                results = requests.post(url, data, headers=requestHeaders)  #get(resource, headers=requestHeaders).json()
                    
        
main()
exit()